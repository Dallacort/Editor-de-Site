/**
 * HARDEM - Script de Normaliza√ß√£o de Tamanhos de Imagens
 * Normaliza todas as imagens para o mesmo tamanho do background principal
 * @version 1.0.0
 */

(function() {
    'use strict';

    console.log('üîß Iniciando normaliza√ß√£o autom√°tica de imagens...');

    // Verificar se o editor est√° dispon√≠vel
    if (typeof window.hardemEditor === 'undefined' || !window.hardemEditor.imageEditor) {
        console.error('‚ùå Editor Hardem n√£o encontrado! Certifique-se de que o editor est√° carregado.');
        return;
    }

    const imageEditor = window.hardemEditor.imageEditor;

    /**
     * Fun√ß√£o principal de normaliza√ß√£o
     */
    function normalizeAllImages() {
        try {
            // Executar normaliza√ß√£o
            imageEditor.normalizeAllImageSizes();
            
            // Mostrar relat√≥rio
            setTimeout(() => {
                showNormalizationReport();
            }, 2000);
            
        } catch (error) {
            console.error('‚ùå Erro durante normaliza√ß√£o:', error);
            alert('Erro durante a normaliza√ß√£o: ' + error.message);
        }
    }

    /**
     * Mostrar relat√≥rio de normaliza√ß√£o
     */
    function showNormalizationReport() {
        const normalizedImages = document.querySelectorAll('[data-normalized="true"]');
        const totalImages = document.querySelectorAll('img:not([data-no-edit])').length;
        const totalBackgrounds = document.querySelectorAll('[style*="background-image"]:not([data-no-edit])').length;
        
        const report = `
üìä RELAT√ìRIO DE NORMALIZA√á√ÉO:
‚úÖ Elementos normalizados: ${normalizedImages.length}
üì∑ Total de imagens: ${totalImages}
üé® Total de backgrounds: ${totalBackgrounds}
üìê Dimens√µes aplicadas: ${imageEditor.defaultImageDimensions ? 
    `${imageEditor.defaultImageDimensions.width}x${imageEditor.defaultImageDimensions.height}` : 
    'N√£o definidas'}
        `;
        
        console.log(report);
        
        // Mostrar modal com relat√≥rio se UI dispon√≠vel
        if (window.hardemEditor && window.hardemEditor.ui) {
            window.hardemEditor.ui.showAlert(
                `Normaliza√ß√£o conclu√≠da! ${normalizedImages.length} elementos foram normalizados.`, 
                'success'
            );
        }
    }

    /**
     * Fun√ß√£o para normalizar apenas imagens existentes (vers√£o individual)
     */
    function normalizeExistingImagesOnly() {
        console.log('üéØ Iniciando normaliza√ß√£o individual de imagens existentes...');
        
        const images = document.querySelectorAll('img:not([data-no-edit])');
        const backgrounds = document.querySelectorAll('[style*="background-image"]:not([data-no-edit])');
        
        let processedCount = 0;
        
        // Normalizar cada imagem individualmente
        images.forEach(img => {
            if (imageEditor.isValidImage && imageEditor.isValidImage(img)) {
                // Detectar dimens√µes atuais da imagem
                const rect = img.getBoundingClientRect();
                const targetDims = {
                    width: Math.max(rect.width, 300),
                    height: Math.max(rect.height, 200),
                    element: img
                };
                
                imageEditor.normalizeIndividualImage(img, targetDims);
                processedCount++;
            }
        });
        
        // Normalizar cada background individualmente
        backgrounds.forEach(bg => {
            if (imageEditor.hasValidBackgroundImage && imageEditor.hasValidBackgroundImage(bg)) {
                // Detectar dimens√µes atuais do background
                const rect = bg.getBoundingClientRect();
                const targetDims = {
                    width: Math.max(rect.width, 300),
                    height: Math.max(rect.height, 200),
                    element: bg
                };

                imageEditor.normalizeIndividualImage(bg, targetDims);
                processedCount++;
            }
        });
        
        console.log(`‚úÖ ${processedCount} elementos normalizados individualmente`);
        showNormalizationReport();
    }

    /**
     * Fun√ß√£o para aplicar dimens√µes espec√≠ficas
     */
    function normalizeToSpecificDimensions(width, height) {
        const targetDimensions = {
            width: parseInt(width),
            height: parseInt(height),
            element: null
        };

        // Atualizar configura√ß√µes
        imageEditor.updateImageResizeSettings(targetDimensions);
        
        // Normalizar imagens existentes
        imageEditor.normalizeExistingImages(targetDimensions);
        
        console.log(`üéØ Imagens normalizadas para: ${width}x${height}px`);
        showNormalizationReport();
    }

    /**
     * Interface via console
     */
    window.hardemNormalize = {
        // Normaliza√ß√£o completa
        all: normalizeAllImages,
        
        // Apenas imagens existentes
        existing: normalizeExistingImagesOnly,
        
        // Dimens√µes espec√≠ficas
        toDimensions: normalizeToSpecificDimensions,
        
        // Relat√≥rio atual
        report: showNormalizationReport,
        
        // Normalizar elemento espec√≠fico por seletor
        element: function(selector, width = null, height = null) {
            const element = document.querySelector(selector);
            if (!element) {
                console.error(`‚ùå Elemento n√£o encontrado: ${selector}`);
                return;
            }
            
            let targetDims = null;
            if (width && height) {
                targetDims = { width: parseInt(width), height: parseInt(height), element: element };
            }
            
            imageEditor.normalizeIndividualImage(element, targetDims);
            console.log(`‚úÖ Elemento normalizado: ${selector}`);
        },
        
        // Remover normaliza√ß√£o de elemento espec√≠fico
        remove: function(selector) {
            const element = document.querySelector(selector);
            if (!element) {
                console.error(`‚ùå Elemento n√£o encontrado: ${selector}`);
                return;
            }
            
            if (imageEditor.removeIndividualNormalization) {
                imageEditor.removeIndividualNormalization(element);
                console.log(`‚úÖ Normaliza√ß√£o removida: ${selector}`);
            } else {
                console.error('‚ùå Fun√ß√£o de remo√ß√£o n√£o dispon√≠vel');
            }
        },

        // Resetar todas as normaliza√ß√µes (vers√£o melhorada)
        reset: function() {
            const normalized = document.querySelectorAll('[data-normalized="true"]');
            
            normalized.forEach(el => {
                if (imageEditor.removeIndividualNormalization) {
                    imageEditor.removeIndividualNormalization(el);
                } else {
                    // Fallback para m√©todo antigo
                el.removeAttribute('data-normalized');
                el.removeAttribute('data-target-width');
                el.removeAttribute('data-target-height');
                    el.removeAttribute('data-normalize-id');
                
                if (el.tagName.toLowerCase() === 'img') {
                    el.style.width = '';
                    el.style.height = '';
                    el.style.objectFit = '';
                    el.style.objectPosition = '';
                    }
                }
            });
            
            // Remover containers criados (compatibilidade)
            const containers = document.querySelectorAll('.hardem-image-container');
            containers.forEach(container => {
                const img = container.querySelector('img');
                if (img) {
                    container.parentNode.insertBefore(img, container);
                    container.remove();
                }
            });
            
            console.log(`üîÑ ${normalized.length} normaliza√ß√µes resetadas`);
        },
        
        // Informa√ß√µes de uso
        help: function() {
            console.log(`
üîß HARDEM - Normaliza√ß√£o de Imagens (Sistema Individual)

COMANDOS DISPON√çVEIS:

üìã NORMALIZA√á√ÉO:
‚Ä¢ hardemNormalize.existing() - Normalizar imagens individualmente (RECOMENDADO)
‚Ä¢ hardemNormalize.all() - Normalizar todas com mesmas dimens√µes (CUIDADO!)
‚Ä¢ hardemNormalize.element(selector, width, height) - Normalizar elemento espec√≠fico
‚Ä¢ hardemNormalize.toDimensions(width, height) - Usar dimens√µes espec√≠ficas globais

üîß CONTROLE:
‚Ä¢ hardemNormalize.remove(selector) - Remover normaliza√ß√£o de elemento espec√≠fico
‚Ä¢ hardemNormalize.reset() - Resetar todas as normaliza√ß√µes
‚Ä¢ hardemNormalize.report() - Mostrar relat√≥rio atual
‚Ä¢ hardemNormalize.help() - Mostrar esta ajuda

‚úÖ EXEMPLOS SEGUROS (INDIVIDUAL):
hardemNormalize.existing()                    // Normalizar cada imagem com suas dimens√µes
hardemNormalize.element('img.hero', 1200, 600) // Normalizar imagem espec√≠fica
hardemNormalize.remove('img.hero')            // Remover normaliza√ß√£o espec√≠fica

‚ö†Ô∏è EXEMPLOS GLOBAIS (CUIDADO):
hardemNormalize.all()                         // Aplica mesmas dimens√µes para TODAS
hardemNormalize.toDimensions(1200, 800)       // For√ßa dimens√µes para TODAS

üîÑ LIMPEZA:
hardemNormalize.reset()                       // Remove todas as normaliza√ß√µes
            `);
        }
    };

    // Auto-executar se solicitado via par√¢metro URL
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('auto-normalize') === 'true') {
        console.log('üöÄ Auto-normalizando imagens...');
        setTimeout(normalizeAllImages, 1000);
    }

    // Mostrar instru√ß√µes
    console.log(`
üéØ Sistema de Normaliza√ß√£o Individual de Imagens carregado!

‚úÖ RECOMENDADO - Normaliza√ß√£o individual:
hardemNormalize.existing()

‚ö†Ô∏è CUIDADO - Normaliza√ß√£o global (afeta todas):
hardemNormalize.all()

üìñ Para ver todos os comandos:
hardemNormalize.help()
    `);

})(); 